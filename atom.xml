<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一抹阳光 - qirenji.info</title>
  <subtitle>IT技术分享</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.qirenji.info/"/>
  <updated>2017-07-26T14:05:42.000Z</updated>
  <id>http://www.qirenji.info/</id>
  
  <author>
    <name>Qi Renji</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nginx学习</title>
    <link href="http://www.qirenji.info/2017/07/26/nginx%E5%AD%A6%E4%B9%A0/"/>
    <id>http://www.qirenji.info/2017/07/26/nginx学习/</id>
    <published>2017-07-26T14:04:29.000Z</published>
    <updated>2017-07-26T14:05:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ngix学习"><a href="#ngix学习" class="headerlink" title="ngix学习"></a>ngix学习</h1><h2 id="静态HTTP服务器"><a href="#静态HTTP服务器" class="headerlink" title="静态HTTP服务器"></a>静态HTTP服务器</h2><p>首先，Nginx是一个HTTP服务器，可以将服务器上的静态文件（如HTML、图片）通过HTTP协议展现给客户端。</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span> &#123;</div><div class="line">	<span class="attribute">listen</span> <span class="number">80</span>; <span class="comment"># 端口号</span></div><div class="line">	<span class="attribute">location</span> / &#123;</div><div class="line">		<span class="attribute">root</span> /usr/share/nginx/html; <span class="comment"># 静态文件路径</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="反向代理服务器"><a href="#反向代理服务器" class="headerlink" title="反向代理服务器"></a>反向代理服务器</h2><p>客户端本来可以直接通过HTTP协议访问某网站应用服务器，如果网站管理员在中间加上一个Nginx，客户端请求Nginx，Nginx请求应用服务器，然后将结果返回给客户端，此时Nginx就是反向代理服务器。</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">listen</span> <span class="number">80</span>;</div><div class="line">    <span class="attribute">location</span> / &#123;</div><div class="line">        <span class="attribute">proxy_pass</span> http://192.168.20.1:8080; <span class="comment"># 应用服务器HTTP地址</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>当网站访问量非常大，网站站长开心赚钱的同时，也摊上事儿了。因为网站越来越慢，一台服务器已经不够用了。于是将相同的应用部署在多台服务器上，将大量用户的请求分配给多台机器处理。同时带来的好处是，其中一台服务器万一挂了，只要还有其他服务器正常运行，就不会影响用户使用。</p>
<p>Nginx可以通过反向代理来实现负载均衡。</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">upstream</span> myapp &#123;</div><div class="line">	<span class="attribute">server</span> <span class="number">192.168.20.1:8080</span>; <span class="comment"># 应用服务器1</span></div><div class="line">	<span class="attribute">server</span> <span class="number">192.168.20.2:8080</span>; <span class="comment"># 应用服务器2</span></div><div class="line">&#125;</div><div class="line"><span class="section">server</span> &#123;</div><div class="line">	<span class="attribute">listen</span> <span class="number">80</span>;</div><div class="line">	<span class="attribute">location</span> / &#123;</div><div class="line">		<span class="attribute">proxy_pass</span> http://myapp;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h2><p>网站访问量大，需要负载均衡。然而并不是所有网站都如此出色，有的网站，由于访问量太小，需要节省成本，将多个网站部署在同一台服务器上。<br>例如将www.aaa.com和www.bbb.com两个网站部署在同一台服务器上，两个域名解析到同一个IP地址，但是用户通过两个域名却可以打开两个完全不同的网站，互相不影响，就像访问两个服务器一样，所以叫两个虚拟主机。</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span> &#123;</div><div class="line">	<span class="attribute">listen</span> <span class="number">80</span> default_server;</div><div class="line">	<span class="attribute">server_name</span> _;</div><div class="line">	<span class="attribute">return</span> <span class="number">444</span>; <span class="comment"># 过滤其他域名的请求，返回444状态码</span></div><div class="line">&#125;</div><div class="line"><span class="section">server</span> &#123;</div><div class="line">	<span class="attribute">listen</span> <span class="number">80</span>;</div><div class="line">	<span class="attribute">server_name</span> www.aaa.com; <span class="comment"># www.aaa.com域名</span></div><div class="line">	<span class="attribute">location</span> / &#123;</div><div class="line">		<span class="attribute">proxy_pass</span> http://localhost:8080; <span class="comment"># 对应端口号8080</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="section">server</span> &#123;</div><div class="line">	<span class="attribute">listen</span> <span class="number">80</span>;</div><div class="line">	<span class="attribute">server_name</span> www.bbb.com; <span class="comment"># www.bbb.com域名</span></div><div class="line">	<span class="attribute">location</span> / &#123;</div><div class="line">		<span class="attribute">proxy_pass</span> http://localhost:8081; <span class="comment"># 对应端口号8081</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在服务器8080和8081分别开了一个应用，客户端通过不同的域名访问，根据server_name可以反向代理到对应的应用服务器。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ngix学习&quot;&gt;&lt;a href=&quot;#ngix学习&quot; class=&quot;headerlink&quot; title=&quot;ngix学习&quot;&gt;&lt;/a&gt;ngix学习&lt;/h1&gt;&lt;h2 id=&quot;静态HTTP服务器&quot;&gt;&lt;a href=&quot;#静态HTTP服务器&quot; class=&quot;headerlink
    
    </summary>
    
      <category term="服务器" scheme="http://www.qirenji.info/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Nginx" scheme="http://www.qirenji.info/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://www.qirenji.info/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>flex布局学习</title>
    <link href="http://www.qirenji.info/2017/07/24/flex%E5%B8%83%E5%B1%80%E5%AD%A6%E4%B9%A0/"/>
    <id>http://www.qirenji.info/2017/07/24/flex布局学习/</id>
    <published>2017-07-24T14:54:39.000Z</published>
    <updated>2017-07-24T14:55:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flex布局"><a href="#Flex布局" class="headerlink" title="Flex布局"></a>Flex布局</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>Flex意为弹性布局，用来为盒模型提供最大的灵活性。设置为Flex布局之后，float、clear和vertical-align属性将失效。</p>
<p>使用Flex布局，首先要设置父容器为</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">display: </span>flex<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>这样就可以使用</p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">justify-<span class="built_in">content</span>: <span class="built_in">center</span>;</div></pre></td></tr></table></figure>
<p>实现水平居中</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">align-items</span>: center;</div></pre></td></tr></table></figure>
<p>实现垂直居中。</p>
<h2 id="容器的属性"><a href="#容器的属性" class="headerlink" title="容器的属性"></a>容器的属性</h2><p>以下6个属性设置在容器上。</p>
<ul>
<li>flex-direction</li>
<li>flex-wrap</li>
<li>flex-flow</li>
<li>justify-content</li>
<li>align-items</li>
<li>align-content<h3 id="flex-direction属性"><a href="#flex-direction属性" class="headerlink" title="flex-direction属性"></a>flex-direction属性</h3>flex-direction属性决定主轴的方向（即项目的排列方向）。</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.flex-box</span>&#123; </div><div class="line">    <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>row（默认值）：主轴为水平方向，起点在左端。</li>
<li>row-reverse：主轴为水平方向，起点在右端。</li>
<li>column：主轴为垂直方向，起点在上沿。</li>
<li>column-reverse：主轴为垂直方向，起点在下沿。</li>
</ul>
<h3 id="flex-wrap属性"><a href="#flex-wrap属性" class="headerlink" title="flex-wrap属性"></a>flex-wrap属性</h3><p>flex-wrap属性定义，如果一条轴线排不下，如何换行。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.flex-box</span>&#123;</div><div class="line">  <span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>nowrap ：默认，不换行</li>
<li>wrap ：换行，第一行在上方</li>
<li>wrap-reverse：换行，第一行在下方</li>
</ul>
<h3 id="flex-flow属性"><a href="#flex-flow属性" class="headerlink" title="flex-flow属性"></a>flex-flow属性</h3><p>flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.flex-box</span> &#123;</div><div class="line">  <span class="attribute">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="justify-content属性"><a href="#justify-content属性" class="headerlink" title="justify-content属性"></a>justify-content属性</h3><p>justify-content属性定义了项目在主轴上的对齐方式。</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.flex-box &#123;</div><div class="line">  justify-content: flex-start | flex-<span class="keyword">end</span> | center | <span class="literal">space</span>-<span class="keyword">between</span> | <span class="literal">space</span>-<span class="keyword">around</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。</p>
<ul>
<li>flex-start（默认值）：左对齐</li>
<li>flex-end：右对齐</li>
<li>center： 居中</li>
<li>space-between：两端对齐，项目之间的间隔都相等。</li>
<li>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li>
</ul>
<h3 id="align-items属性"><a href="#align-items属性" class="headerlink" title="align-items属性"></a>align-items属性</h3><figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.flex-box &#123;</div><div class="line">  align-items: flex-start | <span class="type">flex</span>-<span class="keyword">end</span> | <span class="type">center</span> | <span class="type">baseline</span> | <span class="type">stretch</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。</p>
<ul>
<li>flex-start：交叉轴的起点对齐。</li>
<li>flex-end：交叉轴的终点对齐。</li>
<li>center：交叉轴的中点对齐。</li>
<li>baseline:项目的第一行文字的基线对齐。</li>
<li>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。<h3 id="align-content属性"><a href="#align-content属性" class="headerlink" title="align-content属性"></a>align-content属性</h3></li>
</ul>
<figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.flex-box &#123;</div><div class="line">  align-content: flex-start | <span class="type">flex</span>-<span class="keyword">end</span> | <span class="type">center</span> | <span class="type">space</span>-between | <span class="type">space</span>-around | <span class="type">stretch</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>flex-start：与交叉轴的起点对齐。</li>
<li>flex-end：与交叉轴的终点对齐。</li>
<li>center：与交叉轴的中点对齐。</li>
<li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</li>
<li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li>
<li>stretch（默认值）：轴线占满整个交叉轴(如果项目未设置高度或设为auto时，并且align-item连用，否则失效）<br>)</li>
</ul>
<h2 id="项目中常用属性"><a href="#项目中常用属性" class="headerlink" title="项目中常用属性"></a>项目中常用属性</h2><p>首先父级使用</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">display</span>：<span class="attribute">flex</span></div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">按比例分配</div></pre></td></tr></table></figure>
<figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flex：<span class="built_in">n</span></div></pre></td></tr></table></figure>
<h3 id="分配固定像素"><a href="#分配固定像素" class="headerlink" title="分配固定像素"></a>分配固定像素</h3><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">flex:</span> <span class="number">0</span> <span class="number">0</span> <span class="number">200</span>px。</div></pre></td></tr></table></figure>
<p>来分配200像素的空间。</p>
<h3 id="分配方向"><a href="#分配方向" class="headerlink" title="分配方向"></a>分配方向</h3><p>默认是水平分配，如需垂直分配，则使用</p>
<figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flex-directi<span class="symbol">on:</span> <span class="built_in">column</span></div></pre></td></tr></table></figure>
<h3 id="子项水平居中"><a href="#子项水平居中" class="headerlink" title="子项水平居中"></a>子项水平居中</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">justify-<span class="built_in">content</span>: <span class="built_in">center</span></div></pre></td></tr></table></figure>
<h3 id="子项垂直居中"><a href="#子项垂直居中" class="headerlink" title="子项垂直居中"></a>子项垂直居中</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">align-items</span>: center;</div></pre></td></tr></table></figure>
<p>如需学习更多有关flex的相关知识，可去<a href="http://www.runoob.com/cssref/css3-pr-flex.html" target="_blank" rel="external">菜鸟教程</a>和<a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="external">阮一峰</a>老师的博客。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Flex布局&quot;&gt;&lt;a href=&quot;#Flex布局&quot; class=&quot;headerlink&quot; title=&quot;Flex布局&quot;&gt;&lt;/a&gt;Flex布局&lt;/h1&gt;&lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基
    
    </summary>
    
      <category term="CSS3" scheme="http://www.qirenji.info/categories/CSS3/"/>
    
    
      <category term="flex" scheme="http://www.qirenji.info/tags/flex/"/>
    
      <category term="CSS3" scheme="http://www.qirenji.info/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>git常用命令</title>
    <link href="http://www.qirenji.info/2017/07/22/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.qirenji.info/2017/07/22/git常用命令/</id>
    <published>2017-07-22T13:48:13.000Z</published>
    <updated>2017-07-22T13:49:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h1><h2 id="基本命令使用"><a href="#基本命令使用" class="headerlink" title="基本命令使用"></a>基本命令使用</h2><ol>
<li><p>在当前目录创建Git仓库，会在当前目录创建.git文件夹</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">git init</span></div></pre></td></tr></table></figure>
</li>
<li><p>把文件提交到暂存区</p>
</li>
</ol>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">add</span><span class="bash"> ./&lt;path&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>提交当前工作空前的修改内容</li>
</ol>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">git</span> commit -m <span class="string">'注释'</span></div></pre></td></tr></table></figure>
<ol>
<li>将存储库克隆到本地目录中</li>
</ol>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/jquery/jquery.git</div></pre></td></tr></table></figure>
<ol>
<li>将本地分支的更新，推送到远程主机。</li>
</ol>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> master</div></pre></td></tr></table></figure>
<ol>
<li>从远程获取最新版本并merge到本地</li>
</ol>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">git pull</span></div></pre></td></tr></table></figure>
<p>相当于git fetch和git merge一起使用</p>
<ol>
<li>列出详细信息，在每一个名字后面列出其远程url</li>
</ol>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">git remote -v</span></div></pre></td></tr></table></figure>
<ol>
<li>在url创建名字为name的仓库<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="selector-tag">git</span> <span class="selector-tag">remote</span> <span class="selector-tag">add</span> <span class="selector-tag">origin</span> <span class="selector-tag">git</span>@<span class="keyword">git</span>.*/<span class="keyword">website_node</span>.<span class="keyword">git</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><ol>
<li>创建分支</li>
</ol>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">git</span> <span class="keyword">branch </span>dev</div></pre></td></tr></table></figure>
<ol>
<li>切换分支</li>
</ol>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">git checkout dev</span></div></pre></td></tr></table></figure>
<ol>
<li>查看当前分支</li>
</ol>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">git branch</span></div></pre></td></tr></table></figure>
<ol>
<li>创建并切换分支</li>
</ol>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">git</span> <span class="keyword">branch </span>-d dev</div></pre></td></tr></table></figure>
<h2 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h2><p>Git最常用的可能就是多人协作时解决冲突问题。</p>
<p>一般会先push上自己的文件</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">add</span><span class="bash"> .</span></div><div class="line">git commit -m <span class="string">'注释'</span></div><div class="line">git push -u origin branch-name</div></pre></td></tr></table></figure>
<p>然后发现推送失败了，这是因为远程的分支和自己的本地推送内容更新，所以需要使用git pull把远程分支与本地合并。</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">git pull</span></div></pre></td></tr></table></figure>
<p>如果合并有冲突，则需要在本地解决冲突。</p>
<p>解决冲突之后，再重新git push就能推送成功了。</p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> baranch-name</div></pre></td></tr></table></figure>
<p>这就是多人协作之解决冲突。</p>
<p>这里也推荐初学者使用 <a href="https://desktop.github.com/" target="_blank" rel="external">github desktop</a>，毕竟图形化界面使用起来更直观一些。</p>
<p>如需学习更多内容，请参廖雪峰老师的<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">Git教程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;git常用命令&quot;&gt;&lt;a href=&quot;#git常用命令&quot; class=&quot;headerlink&quot; title=&quot;git常用命令&quot;&gt;&lt;/a&gt;git常用命令&lt;/h1&gt;&lt;h2 id=&quot;基本命令使用&quot;&gt;&lt;a href=&quot;#基本命令使用&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
      <category term="远程管理" scheme="http://www.qirenji.info/categories/%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="git" scheme="http://www.qirenji.info/tags/git/"/>
    
      <category term="远程管理" scheme="http://www.qirenji.info/tags/%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>vue全家桶总结</title>
    <link href="http://www.qirenji.info/2017/07/20/vue%E5%85%A8%E5%AE%B6%E6%A1%B6%E6%80%BB%E7%BB%93/"/>
    <id>http://www.qirenji.info/2017/07/20/vue全家桶总结/</id>
    <published>2017-07-20T14:09:27.000Z</published>
    <updated>2017-07-20T14:15:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue全家桶学习"><a href="#vue全家桶学习" class="headerlink" title="vue全家桶学习"></a>vue全家桶学习</h1><h2 id="一-vue-cli-手脚架搭建项目"><a href="#一-vue-cli-手脚架搭建项目" class="headerlink" title="一. vue-cli(手脚架搭建项目)"></a>一. vue-cli(手脚架搭建项目)</h2><p>初始化项目<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">vue init webpack projectName</span></div></pre></td></tr></table></figure></p>
<p>然后顺序执行如下命令，可启动vue项目</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd <span class="keyword">my</span>-project</div><div class="line">npm install</div><div class="line">npm <span class="built_in">run</span> dev</div></pre></td></tr></table></figure>
<p>如项目中使用其他库或组件需  </p>
<figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install *** --<span class="built_in">save</span>-<span class="built_in">dev</span></div></pre></td></tr></table></figure>
<p>例如使用scss编写软件,需安装sass编译工具 </p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install sass sass-loader <span class="keyword">node</span><span class="title">-sass</span> --save-dev</div></pre></td></tr></table></figure>
<h2 id="二-vue-router"><a href="#二-vue-router" class="headerlink" title="二.vue-router"></a>二.vue-router</h2><p>vue-router主要作为程序的路由控制器</p>
<ul>
<li>使用：</li>
</ul>
<p>main.js中添加router</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">import</span> <span class="selector-tag">router</span> <span class="selector-tag">from</span> ‘./<span class="selector-tag">router</span>’</div><div class="line"><span class="selector-tag">new</span> <span class="selector-tag">Vue</span>(&#123;</div><div class="line">  <span class="attribute">el</span>: <span class="string">'#app'</span>,</div><div class="line">  router,</div><div class="line">  <span class="attribute">template</span>: <span class="string">'&lt;App/&gt;'</span>,</div><div class="line">  <span class="attribute">components</span>: &#123; App &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>./router/index.js文件中</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">import Router <span class="keyword">from</span> ‘vue-router’</div><div class="line">Vue.use(Router);</div><div class="line"></div><div class="line"><span class="builtin-name">export</span><span class="built_in"> default </span>new Router(&#123;</div><div class="line">	routes: [</div><div class="line">		&#123;</div><div class="line">			path: ‘/user/:name’,</div><div class="line">			name: ‘user’,</div><div class="line">			component:<span class="built_in"> User</span></div><div class="line">		&#125;</div><div class="line">		&#123;</div><div class="line">			path: ‘/’,</div><div class="line">			redirect: ‘/goods’(映射两个地址的关系)</div><div class="line">		&#125;</div><div class="line">	]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>路由的使用(相当于是a链接)，绑定to来传递数据</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">“</span></span></span><span class="template-variable">&#123;name:’user’, params: &#123;name:...&#125;</span><span class="xml"><span class="tag">&#125;”&gt;</span></span></div><div class="line"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在要切换路由的位置使用router-view进行配合的</p>
<figure class="highlight apache"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="section">&lt;router-view&gt;</span><span class="section">&lt;/router-view&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>其他</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//返回上一页面</span></div><div class="line"><span class="keyword">this</span>.$router.go(<span class="number">-1</span>)</div></pre></td></tr></table></figure>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//等同于&lt;router-link&gt;</span></div><div class="line"><span class="keyword">this</span>.$router.push(&#123;<span class="string">name:</span><span class="string">'article'</span>,<span class="string">params:</span> &#123; &#125;&#125;)</div></pre></td></tr></table></figure>
<h2 id="三-vue-resource"><a href="#三-vue-resource" class="headerlink" title="三. vue-resource"></a>三. vue-resource</h2><h3 id="vue-resource"><a href="#vue-resource" class="headerlink" title="vue-resource"></a>vue-resource</h3><p>添加vue-resource组件</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">import</span> VueResource from ‘vue-resource’</span></div><div class="line"></div><div class="line">Vue.use(VueResource);</div></pre></td></tr></table></figure>
<p>使用：</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">this.<span class="variable">$http</span>.<span class="builtin-name">get</span>(‘/goods’)</div><div class="line">	.then(<span class="built_in">..</span>.)</div></pre></td></tr></table></figure>
<h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><p>vue-ressource的下一代产品</p>
<figure class="highlight capnproto"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> VueAxios <span class="keyword">from</span> ‘vue-axios’</div><div class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> ‘axios’</div><div class="line"></div><div class="line">Vue.use(VueAxios,axios)</div></pre></td></tr></table></figure>
<p>使用：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.axios.get(‘https:<span class="comment">//...’)</span></div><div class="line">	.then(<span class="function"><span class="params">result</span> =&gt;</span> &#123; ... &#125;)</div><div class="line"><span class="keyword">this</span>.axios.post(‘https:<span class="comment">//’,&#123;accesstoken: this.ak&#125;)</span></div><div class="line">	.then(<span class="function"><span class="params">result</span> =&gt;</span> &#123; ... &#125;)</div></pre></td></tr></table></figure>
<h2 id="四-vuex"><a href="#四-vuex" class="headerlink" title="四. vuex"></a>四. vuex</h2><p>组件之间多通信时使用</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">import Vuex <span class="keyword">from</span> ‘vuex’</div><div class="line">vue.use(Vuex);</div><div class="line">const store = new Vuex.Store(&#123;</div><div class="line">	<span class="keyword">state</span>: &#123;</div><div class="line">		tab: ‘<span class="literal">all</span>’</div><div class="line">	&#125;,</div><div class="line">	mutations: &#123;</div><div class="line">		changeTab(<span class="keyword">state</span>,payload) &#123;</div><div class="line">			<span class="keyword">state</span>.tab = …</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;)</div><div class="line">new Vue(&#123;</div><div class="line">  el: '<span class="comment">#app',</span></div><div class="line">  store,</div><div class="line">  template: '<span class="variable">&lt;App/&gt;</span>',</div><div class="line">  components: &#123; App &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>在组件中使用</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">this.<span class="variable">$store</span>.<span class="keyword">state</span>.tab;</div><div class="line">this.<span class="variable">$store</span>.commit.(‘changeTab’,&#123; 传参 &#125;)</div></pre></td></tr></table></figure>
<h2 id="五-vue的属性"><a href="#五-vue的属性" class="headerlink" title="五. vue的属性"></a>五. vue的属性</h2><figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">props</span>: &#123;&#125;</div><div class="line"><span class="attribute">computed</span>: &#123;&#125;</div><div class="line"><span class="attribute">methods</span>: &#123;&#125;</div><div class="line"><span class="attribute">components</span>: &#123;&#125;</div><div class="line"><span class="attribute">filters</span>: &#123;&#125;</div><div class="line"><span class="attribute">watch</span>: &#123; ‘seller’() &#123;&#125;&#125;</div><div class="line"></div><div class="line"><span class="stylus"><span class="function"><span class="title">data</span><span class="params">()</span></span> &#123;&#125;</span></div><div class="line"><span class="function"><span class="title">created</span><span class="params">()</span></span> &#123;&#125;</div><div class="line"><span class="function"><span class="title">mounted</span><span class="params">()</span></span> &#123;&#125;</div></pre></td></tr></table></figure>
<p>注意这里只有data和生命周期的钩子函数使用函数形式。</p>
<h2 id="六、父子组件传递数据"><a href="#六、父子组件传递数据" class="headerlink" title="六、父子组件传递数据"></a>六、父子组件传递数据</h2><ul>
<li><h3 id="父to子"><a href="#父to子" class="headerlink" title="父to子"></a>父to子</h3>父组件中：</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">v-bind:属性名=“ ”（简写为  :<span class="attribute">food</span>=“food”）</div></pre></td></tr></table></figure>
<p>子组件：</p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">props</span>获取</div></pre></td></tr></table></figure>
<ul>
<li><h3 id="子to父"><a href="#子to父" class="headerlink" title="子to父"></a>子to父</h3></li>
</ul>
<p>子组件：<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$emit(<span class="string">'add'</span>,<span class="keyword">event</span>.target)</div></pre></td></tr></table></figure></p>
<p>父组件：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">v-on</span>(简写为<span class="variable">@add</span>=“addFood”)</div></pre></td></tr></table></figure>
<h2 id="七、其他"><a href="#七、其他" class="headerlink" title="七、其他"></a>七、其他</h2><p>DOM更新完成之后执行</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;	&#125;);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;vue全家桶学习&quot;&gt;&lt;a href=&quot;#vue全家桶学习&quot; class=&quot;headerlink&quot; title=&quot;vue全家桶学习&quot;&gt;&lt;/a&gt;vue全家桶学习&lt;/h1&gt;&lt;h2 id=&quot;一-vue-cli-手脚架搭建项目&quot;&gt;&lt;a href=&quot;#一-vue-cli-手脚
    
    </summary>
    
      <category term="Vue" scheme="http://www.qirenji.info/categories/Vue/"/>
    
      <category term="JavaScript" scheme="http://www.qirenji.info/categories/Vue/JavaScript/"/>
    
    
      <category term="Vue" scheme="http://www.qirenji.info/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue项目部署阿里云</title>
    <link href="http://www.qirenji.info/2017/07/19/Vue%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    <id>http://www.qirenji.info/2017/07/19/Vue项目部署阿里云/</id>
    <published>2017-07-19T14:06:29.000Z</published>
    <updated>2017-07-20T14:12:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue项目部署到阿里云服务器"><a href="#Vue项目部署到阿里云服务器" class="headerlink" title="Vue项目部署到阿里云服务器"></a>Vue项目部署到阿里云服务器</h1><p>文章适合初学vue项目想部署到服务上的。</p>
<h2 id="一、文件准备"><a href="#一、文件准备" class="headerlink" title="一、文件准备"></a>一、文件准备</h2><p>首先准备好要发布的前后台文件</p>
<h3 id="前端文件"><a href="#前端文件" class="headerlink" title="前端文件"></a>前端文件</h3><p>如是使用vue-cli搭建，在vue项目中使用如下命令生成</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">run</span><span class="bash"> build</span></div></pre></td></tr></table></figure>
<p>可以看到在本地多出来一个dist文件，此文件为压缩后文件，可直接部署到服务器</p>
<h3 id="后端文件"><a href="#后端文件" class="headerlink" title="后端文件"></a>后端文件</h3><p>可以简单编写一个，或由后端同学提供<br>这里给出一个nodejs的小例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</div><div class="line"></div><div class="line"><span class="keyword">var</span> port = process.env.PORT || <span class="number">3000</span>;</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"></div><div class="line">app.use(express.static(<span class="string">'./dist'</span>));</div><div class="line"></div><div class="line">app.get(<span class="string">"/"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</div><div class="line">	res.render(<span class="string">'index.html'</span>,&#123;&#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = app.listen(port, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span> (err) &#123;</div><div class="line">		<span class="built_in">console</span>.log(err);</div><div class="line">		<span class="keyword">return</span></div><div class="line">	&#125;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'Listening at http://localhost:'</span> + port + <span class="string">'\n'</span>)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这里后端端口号使用3000端口。</p>
<h2 id="二-关联文件"><a href="#二-关联文件" class="headerlink" title="二. 关联文件"></a>二. 关联文件</h2><ul>
<li><p>把前后端文件放入一个文件夹中，添加至github或码云等仓库</p>
</li>
<li><p>在git上添加服务器和本地的ssh。</p>
</li>
<li><p>服务器和本地都需安装pm2</p>
</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> pm2 -g</div></pre></td></tr></table></figure>
<p>这样就可以通过github把本地和服务器关联起来。</p>
<p>在服务器端的/www文件夹下，创建项目文件夹，并修改其权限，简单简单修改为 </p>
<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cd</span> <span class="string">/www</span></div><div class="line"></div><div class="line">sudo chmod 777 cnode</div></pre></td></tr></table></figure>
<h2 id="三-修改阿里云安全组"><a href="#三-修改阿里云安全组" class="headerlink" title="三. 修改阿里云安全组"></a>三. 修改阿里云安全组</h2><p>登陆到阿里云服务器管理页面，找到安全组，添加项目中所需要的安全组的端口号。</p>
<h2 id="四-修改服务器防火墙"><a href="#四-修改服务器防火墙" class="headerlink" title="四. 修改服务器防火墙"></a>四. 修改服务器防火墙</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//修改防火墙 </span></div><div class="line">sudo vi /etc/iptables<span class="selector-class">.up</span><span class="selector-class">.rules</span></div></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//重启防火墙</span></div><div class="line">sudo iptables-restore &lt; /etc/iptables<span class="selector-class">.up</span><span class="selector-class">.rules</span></div></pre></td></tr></table></figure>
<h2 id="五-编写ecosystem文件"><a href="#五-编写ecosystem文件" class="headerlink" title="五. 编写ecosystem文件"></a>五. 编写ecosystem文件</h2><p>本地编写ecosystem.json文件。如下</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"apps"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"name"</span>: <span class="string">"cnode"</span>,</div><div class="line">      <span class="attr">"script"</span>: <span class="string">"server.js"</span>,</div><div class="line">      <span class="attr">"env"</span>: &#123;</div><div class="line">        <span class="attr">"COMMON_VARIABLE"</span>: <span class="string">"true"</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">"env_production"</span>: &#123;</div><div class="line">        <span class="attr">"NODE_ENV"</span>: <span class="string">"production"</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ],</div><div class="line">  <span class="attr">"deploy"</span>: &#123;</div><div class="line">    <span class="attr">"production"</span>: &#123;</div><div class="line">      <span class="attr">"user"</span>: <span class="string">"服务器用户名"</span>,</div><div class="line">      <span class="attr">"host"</span>: [<span class="string">"你的服务器ip"</span>],</div><div class="line">      <span class="attr">"port"</span>: <span class="string">"服务器端口号"</span>,</div><div class="line">      <span class="attr">"ref"</span>: <span class="string">"origin/master"</span>,</div><div class="line">      <span class="attr">"repo"</span>: <span class="string">"gtihub或码云的对应项目ssh地址"</span>,</div><div class="line">      <span class="attr">"path"</span>: <span class="string">"/www/cnode/production"</span>,</div><div class="line">      <span class="attr">"ssh_options"</span>: <span class="string">"StrictHostKeyChecking=no"</span>,</div><div class="line">      <span class="attr">"post-deploy"</span>: <span class="string">"npm install --registry=https://registry.npm.taobao.org &amp;&amp; pm2 startOrRestart ecosystem.json --env production"</span>,</div><div class="line">      <span class="attr">"env"</span>: &#123;</div><div class="line">        <span class="attr">"NODE_ENV"</span>: <span class="string">"production"</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后本地执行</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pm2 deploy ecosystem<span class="selector-class">.json</span> production resetup</div></pre></td></tr></table></figure>
<p>看到Success说明部署成功。</p>
<p>以后每次服务器更新只需提交到github执行上述代码即可</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Vue项目部署到阿里云服务器&quot;&gt;&lt;a href=&quot;#Vue项目部署到阿里云服务器&quot; class=&quot;headerlink&quot; title=&quot;Vue项目部署到阿里云服务器&quot;&gt;&lt;/a&gt;Vue项目部署到阿里云服务器&lt;/h1&gt;&lt;p&gt;文章适合初学vue项目想部署到服务上的。&lt;/
    
    </summary>
    
      <category term="建站" scheme="http://www.qirenji.info/categories/%E5%BB%BA%E7%AB%99/"/>
    
    
      <category term="Vue" scheme="http://www.qirenji.info/tags/Vue/"/>
    
      <category term="项目部署" scheme="http://www.qirenji.info/tags/%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>hexo搭建github个人博客</title>
    <link href="http://www.qirenji.info/2017/07/18/hexo%E6%90%AD%E5%BB%BAgithub%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://www.qirenji.info/2017/07/18/hexo搭建github个人博客/</id>
    <published>2017-07-18T15:41:11.000Z</published>
    <updated>2017-07-19T14:33:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用Hexo-3-搭建github-blog"><a href="#用Hexo-3-搭建github-blog" class="headerlink" title="用Hexo 3 搭建github blog"></a>用Hexo 3 搭建github blog</h1><p>本文使用的是Mac进行演示，如过是windows系统方式基本相同，单具体安装步骤请自行百度。</p>
<h2 id="一-注册github账号"><a href="#一-注册github账号" class="headerlink" title="一. 注册github账号"></a>一. 注册github账号</h2><p>点击gitbub<a href="http://github.com/" target="_blank" rel="external">官方网站</a>进行注册</p>
<h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>注册完成后点击github首页上的➕New repository创建仓库</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/github-create.png" alt="image" title="">
                </div>
                <div class="image-caption">image</div>
            </figure>
<p>创建的Repository name有固定的格式<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">你的github昵称<span class="selector-class">.github</span><span class="selector-class">.io</span></div></pre></td></tr></table></figure></p>
<p>点击Creat repository即可创建仓库</p>
<h3 id="生成添加秘钥"><a href="#生成添加秘钥" class="headerlink" title="生成添加秘钥"></a>生成添加秘钥</h3><p>打开终端输入：</p>
<figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -<span class="built_in">t</span> rsa -C <span class="string">"Github的注册邮箱地址"</span></div></pre></td></tr></table></figure>
<p>一路Enter过来就好，待秘钥生成完毕，会得到两个文件id_rsa和id_rsa.pub</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat ~<span class="regexp">/.ssh/i</span>d_rsa.pub</div></pre></td></tr></table></figure>
<p>查看公钥并复制其内容。</p>
<p><a href="http://github.com/settings/keys" target="_blank" rel="external">http://github.com/settings/ssh</a></p>
<p>New SSH key<br>输入一个Title把刚才查看到的公钥输入到Key上，生成SSH key。</p>
<h2 id="二-node-js-和git安装"><a href="#二-node-js-和git安装" class="headerlink" title="二.node.js 和git安装"></a>二.node.js 和git安装</h2><p>进入<a href="http://nodejs.cn/download//" target="_blank" rel="external">node.js官网</a>，下载并安装即可，推荐安装新版。</p>
<hr>
<p>git安装可用过homebrew安装，首先安装homebrew</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/<span class="keyword">install</span>/<span class="keyword">master</span>/<span class="keyword">install</span>)<span class="string">"</span></div></pre></td></tr></table></figure>
<p>然后安装git</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">brew </span><span class="keyword">install </span>git</div></pre></td></tr></table></figure>
<h2 id="三-安装hexo"><a href="#三-安装hexo" class="headerlink" title="三.安装hexo"></a>三.安装hexo</h2><p>强调一下，这一步使我们搭建博客的核心，是重中之重。</p>
<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> npm install -g hexo-cli</span></div></pre></td></tr></table></figure>
<p>安装好之后，终端输入</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> hexo</span></div></pre></td></tr></table></figure>
<p>若出现下图，说明hexo安装成功</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://upload-images.jianshu.io/upload_images/291600-34e4d1af45d6f267.png?imageMogr2/auto-orient/strip%7CimageView2/2" alt="image" title="">
                </div>
                <div class="image-caption">image</div>
            </figure>
<h3 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a>初始化博客</h3><p>着到你创建博客的目录，创建博客文件夹</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 创建博客文件夹，并初始化博客</div><div class="line"><span class="meta">$</span><span class="bash"> hexo init &lt;folder&gt;</span></div><div class="line">//进入博客文件夹</div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> &lt;folder&gt;</span></div><div class="line">//安装所有的依赖包</div><div class="line"><span class="meta">$</span><span class="bash"> npm install</span></div></pre></td></tr></table></figure>
<h2 id="四-修改博客主题和配置"><a href="#四-修改博客主题和配置" class="headerlink" title="四.修改博客主题和配置"></a>四.修改博客主题和配置</h2><ul>
<li>先下载<a href="http://hexo.in/themes/" target="_blank" rel="external">主题</a>到themes文件夹中</li>
<li>修改_config.yml文件中themes项为自己的主题名</li>
<li>修改_config.yml文件中的deploy项如下</li>
</ul>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">deploy</span>:</div><div class="line">  <span class="attribute">type</span>: git</div><div class="line">  <span class="attribute">repo</span>: <span class="attribute">https</span>:<span class="comment">//github.com/你的昵称/你的昵称.github.io.git</span></div><div class="line">  <span class="attribute">branch</span>: master</div></pre></td></tr></table></figure>
<h2 id="五-新建文章并发布"><a href="#五-新建文章并发布" class="headerlink" title="五.新建文章并发布"></a>五.新建文章并发布</h2><p>在博客根文件夹下</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> hexo n <span class="string">"文章名称"</span></span></div></pre></td></tr></table></figure>
<p>可以看到在source/_post/文件夹看到新建的.md文件<br>可以在其结尾处添加一些内容，方便我们测试。<br>输入<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> hexo g</span></div></pre></td></tr></table></figure></p>
<p>生成我们要发布的文件，在发布之前我们可以通过</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> hexo s</span></div></pre></td></tr></table></figure>
<p>然后打开浏览器输入<a href="http://localhost:4000/" target="_blank" rel="external">localhost:4000</a>,查看文章。<br>现在只是在本地跑起来来，还需要把程序托管到github上。</p>
<p>首先来到 <a href="https://github.com/你的昵称/你的昵称.github.io/settings" target="_blank" rel="external">https://github.com/你的昵称/你的昵称.github.io/settings</a> 进行github pages页进行设置，选择source为master分支，点击save即可</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/github-pages.png" alt="image" title="">
                </div>
                <div class="image-caption">image</div>
            </figure>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//安装hexo git插件</span></div><div class="line"><span class="symbol">$</span> npm install hexo-deployer-git --save</div><div class="line"><span class="comment">//部署到github</span></div><div class="line"><span class="symbol">$</span> hexo g</div></pre></td></tr></table></figure>
<p>这样就可通过 你的昵称.github.io 来访问我们的博客了</p>
<h2 id="六-关联域名"><a href="#六-关联域名" class="headerlink" title="六.关联域名"></a>六.关联域名</h2><p>首先去万网，godaddy等域名系统来购买一个域名。<br>这里我买的是godaddy的域名。购买完成后进入到 管理DNS 关联github</p>
<p> <img src="/img/hexo-dns.png" alt="image"></p>
<p>然后再去github pages页设置Custom domain选项为你买的域名。<br>关联成功后等待几分钟，就可以通过域名访问你的hexo博客来。</p>
<h2 id="七-其他"><a href="#七-其他" class="headerlink" title="七.其他"></a>七.其他</h2><figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">hexo常用命令</div><div class="line">hexo n <span class="string">"我的博客"</span>==hexo new <span class="string">"我的博客"</span><span class="comment">#新建文章</span></div><div class="line">hexo <span class="attr">p==hexo</span> publish</div><div class="line">hexo <span class="attr">g==hexo</span> generate<span class="comment">#生成</span></div><div class="line">hexo <span class="attr">s==hexo</span> server<span class="comment">#启动服务预览</span></div><div class="line">hexo <span class="attr">d==hexo</span> deploy<span class="comment">#部署</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;用Hexo-3-搭建github-blog&quot;&gt;&lt;a href=&quot;#用Hexo-3-搭建github-blog&quot; class=&quot;headerlink&quot; title=&quot;用Hexo 3 搭建github blog&quot;&gt;&lt;/a&gt;用Hexo 3 搭建github blog&lt;/
    
    </summary>
    
      <category term="建站" scheme="http://www.qirenji.info/categories/%E5%BB%BA%E7%AB%99/"/>
    
    
      <category term="hexo" scheme="http://www.qirenji.info/tags/hexo/"/>
    
      <category term="个人博客" scheme="http://www.qirenji.info/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
